generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

enum Role {
  ADMIN
  Transcriber
  MEMBER
  OWNER
}


enum EntityType {
  PERSON
  BUSINESS
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  mobileNumber  String    @unique
  country       String
  role          Role      @default(ADMIN)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  tasks         Task[]

  accounts     Account[]
  sessions     Session[]
  invitations  Invitation[]
  transcribers Transcriber[]
}

model Team {
  id           String        @id @default(uuid())
  name         String
  slug         String        @unique
  domain       String?       @unique
  defaultRole  Role          @default(MEMBER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  transcribers Transcriber[]
  invitations  Invitation[]
  apiKeys      ApiKey[]
}

model Transcriber {
  id        String     @id @default(uuid())
  name      String?
  gender    String?
  role      Role       @default(Transcriber)
  age       String?
  email     String?    @unique
  languages Language[]
  tasks     Task[]
  team      Team       @relation(fields: [teamId], references: [id])
  teamId    String
  payments  Payment[]
  rating    Rating[]
  user      User       @relation(fields: [userId], references: [id])
  userId    String

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(uuid())
  teamId    String
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  invitedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model Language {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String
  code         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  transcribers Transcriber[]
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Task {
  id                    String         @id @default(uuid())
  language              String
  type                  String
  name                  String
  status                String
  deadline              DateTime
  assignedTranscriber   Transcriber?   @relation(fields: [assignedTranscriberId], references: [id])
  assignedTranscriberId String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  user                  User           @relation(fields: [userId], references: [id])
  userId                String
  files                 File[]
}

model File {
  id          String   @id @default(uuid())
  url         String
  contentSize Int
  fileFormat  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  task        Task?    @relation(fields: [taskId], references: [id])
  taskId      String?
}

model Payment {
  id            String      @id @default(uuid())
  transcriber   Transcriber @relation(fields: [transcriberId], references: [id])
  transcriberId String
  amount        Float
  date          DateTime
  status        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Rating {
  id            String      @id @default(uuid())
  transcriber   Transcriber @relation(fields: [transcriberId], references: [id])
  transcriberId String
  rating        Float
  comment       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
