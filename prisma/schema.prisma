generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  emailVerified DateTime?
  password      String?
  mobileNumber  String        @unique
  country       String
  role          Role          @default(ADMIN)
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  accounts      Account[]
  invitations   Invitation[]
  sessions      Session[]
  tasks         Task[]
  transcribers  Transcriber[]
}

model Team {
  id           String        @id @default(uuid())
  name         String
  slug         String        @unique
  domain       String?       @unique
  defaultRole  Role          @default(TRANSCRIBER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  apiKeys      ApiKey[]
  invitations  Invitation[]
  transcribers Transcriber[]
}

model Transcriber {
  id        String     @id @default(uuid())
  name      String?
  gender    String?
  role      Role       @default(TRANSCRIBER)
  age       String?
  email     String?    @unique
  teamId    String
  userId    String
  payments  Payment[]
  rating    Rating[]
  team      Team       @relation(fields: [teamId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  languages Language[] @relation("LanguageToTranscriber")
  tasks     Task[]     @relation("TaskToTranscriber")

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(uuid())
  teamId    String
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  invitedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  taskId    String
  user      User     @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model Language {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String
  code         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  transcribers Transcriber[] @relation("LanguageToTranscriber")

  @@index([code])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Task {
  id           String               @id @default(uuid())
  language     String
  type         String
  name         String
  status       String
  deadline     DateTime
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  userId       String
  files        File[]
  invitations  Invitation[]
  user         User                 @relation(fields: [userId], references: [id])
  transcripts  Transcript[]
  sentences    sentences_detailed[]
  transcribers Transcriber[]        @relation("TaskToTranscriber")
}

model File {
  id          String       @id @default(uuid())
  url         String       @unique  
  fileFormat  String
  contentSize Int?
  pathname    String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  taskId      String?
  task        Task?        @relation(fields: [taskId], references: [id])
  transcript  Transcript[]

  @@index([url, pathname])
}

model Payment {
  id            String      @id @default(uuid())
  transcriberId String
  amount        Float
  date          DateTime
  status        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transcriber   Transcriber @relation(fields: [transcriberId], references: [id])
}

model Rating {
  id            String      @id @default(uuid())
  transcriberId String
  rating        Float
  comment       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transcriber   Transcriber @relation(fields: [transcriberId], references: [id])
}

model Transcript {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lang               String?   @db.VarChar(4)
  username           String?   @db.VarChar(20)

  taskId    String
  file      File     @relation(fields: [fileId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])
  fileId    String
}

model sentences_detailed {
  sentence_id        String   @id @default(uuid())
  lang               String?   @db.VarChar(4)
  text               String?   @db.VarChar(1500)
  username           String?   @db.VarChar(20)
  date_added         DateTime? @db.Timestamp(6)
  date_last_modified DateTime? @db.Timestamp(6)
  task               Task?     @relation(fields: [taskId], references: [id])
  taskId             String?

  @@index([username, lang, taskId], map: "ix_sentences_detailed_username")
}

model user_languages {
  lang        String  @db.VarChar(4)
  skill_level Int?
  username    String  @db.VarChar(20)
  details     String?

  @@id([lang, username])
}

enum Role {
  ADMIN
  TRANSCRIBER
  MEMBER
  OWNER
}

enum EntityType {
  PERSON
  BUSINESS
}
