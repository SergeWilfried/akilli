generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

enum Role {
  ADMIN
  TRANSCRIPTOR
  MEMBER
}

enum EntityType {
  PERSON
  BUSINESS
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String?
  mobileNumber  String       @unique
  country       String
  gender        String?
  age           String?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  translators   Translator[]
  accounts      Account[]
  sessions      Session[]
  invitations   Invitation[]
  languages     Language[]
}

model Team {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  defaultRole Role     @default(MEMBER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  languages   Language[]
  translators Translator[]
  
  invitations Invitation[]
  apiKeys     ApiKey[]
}

model Translator {
  id      String  @id @default(uuid())
  teamId  String
  userId  String
  address Address @relation(fields: [addressId], references: [id])

  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  team              Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  audiosTranscripts AudioTranscript[]
  transcripts       Transcript[]
  addressId         Int

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id        String   @id @default(uuid())
  teamId    String
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  invitedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model Language {
  id          String            @id @default(uuid())
  teamId      String
  name        String
  description String
  createdBy   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
  spokenIn    String[]
  transcripts Transcript[]
  audios      AudioTranscript[]

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Transcript {
  id                  String    @id @default(uuid())
  topic               String?
  text                String    @db.Text
  textLang            String
  transcript          String    @db.Text
  transcriptionLang   Language? @relation(fields: [transcriptionLangId], references: [id])
  transcriptionLangId String?

  audios AudioTranscript[]

  translator   Translator? @relation(fields: [translatorId], references: [id])
  translatorId String?

  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model AudioTranscript {
  id String @id @default(uuid())

  transcript   Transcript? @relation(fields: [transcriptId], references: [id])
  transcriptId String?
  language     Language?   @relation(fields: [languageId], references: [id])
  languageId   String?
  url          String
  fileFormat   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  translator   Translator? @relation(fields: [translatorId], references: [id])
  translatorId String?
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Address {
  id         Int          @id @default(autoincrement())
  city       String
  state      String
  country    String
  translator Translator[]
}
